name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
       
    - name: Type check
      run: npx tsc --noEmit

    - name: Build distributables
      run: npm run dist:mac
      timeout-minutes: 30
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        # Code signing and notarization
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        # Enable debug logging for notarization issues
        DEBUG: electron-builder
    
    - name: Verify build artifacts
      run: |
        echo "Verifying build artifacts..."
        ls -la release/
        if [ ! -f release/*.dmg ]; then
          echo "ERROR: No DMG file found!"
          echo "Build artifacts:"
          find release/ -type f -name "*" || echo "No release directory found"
          exit 1
        fi
        echo "âœ… DMG file found"
        
    - name: Show notarization status
      if: success() || failure()
      run: |
        echo "Build completed. Checking for any notarization logs..."
        if [ -d "release/" ]; then
          echo "Contents of release directory:"
          ls -la release/
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: distributables-${{ github.ref_name }}
        path: |
          release/*.dmg
          release/*.yml
          release/latest-mac.yml
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          release/*.dmg
        draft: false
        prerelease: contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc')
        generate_release_notes: true
        name: CCSeva ${{ github.ref_name }}
        body: |
          ## CCSeva ${{ github.ref_name }}
          
          A beautiful macOS menu bar app for real-time Claude Code usage tracking.
          
          ### Installation
          1. Download the `.dmg` file below
          2. Open the DMG and drag CCSeva to your Applications folder
          3. Launch CCSeva from Applications
          
          ### Requirements
          - macOS 10.15 or later
          - Claude Code CLI installed and configured
          
          ---
          
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}